// Generated by SolidPython 1.0.4 on 2021-01-16 13:59:21


difference() {
	translate(v = [0, 0, 3.7500000000]) {
		translate(v = [-19.0000000000, -19.0000000000, 0]) {
			hull() {
				translate(v = [3, 0, 0]) {
					translate(v = [0, 3, 0]) {
						cylinder($fn = 32, center = true, h = 7.5000000000, r = 3);
					}
				}
				translate(v = [35, 0, 0]) {
					translate(v = [0, 3, 0]) {
						cylinder($fn = 32, center = true, h = 7.5000000000, r = 3);
					}
				}
				translate(v = [3, 0, 0]) {
					translate(v = [0, 35, 0]) {
						cylinder($fn = 32, center = true, h = 7.5000000000, r = 3);
					}
				}
				translate(v = [35, 0, 0]) {
					translate(v = [0, 35, 0]) {
						cylinder($fn = 32, center = true, h = 7.5000000000, r = 3);
					}
				}
			}
		}
	}
	translate(v = [0, -1.5250000000]) {
		union() {
			translate(v = [0, 0, 6.7500000000]) {
				cube(center = true, size = [25.5000000000, 24.5000000000, 7.5000000000]);
			}
			translate(v = [0, -6.0000000000, 4.7500000000]) {
				cube(center = true, size = [9.0000000000, 12.5000000000, 7.5000000000]);
			}
			translate(v = [10.3000000000, 2.6000000000, 4.1500000000]) {
				cylinder($fn = 32, center = true, d = 2, h = 7.5000000000);
			}
			translate(v = [-10.3000000000, 2.6000000000, 4.1500000000]) {
				cylinder($fn = 32, center = true, d = 2, h = 7.5000000000);
			}
			translate(v = [-10.5000000000, -10.2000000000, 4.1500000000]) {
				cylinder($fn = 32, center = true, d = 2, h = 7.5000000000);
			}
			translate(v = [10.5000000000, -10.2000000000, 4.1500000000]) {
				cylinder($fn = 32, center = true, d = 2, h = 7.5000000000);
			}
			translate(v = [7.5000000000, -8.2500000000, 5]) {
				cylinder($fn = 32, center = true, d = 5, h = 7.5000000000);
			}
		}
	}
	translate(v = [0, 8.5000000000, 6.7500000000]) {
		cube(center = true, size = [25.5000000000, 19.0000000000, 7.5000000000]);
	}
	cube(center = true, size = [9.0000000000, 9.1000000000, 7.6000000000]);
	translate(v = [15.0000000000, 15.0000000000, 4]) {
		rotate(a = [180, 0, 0]) {
			union() {
				cylinder($fn = 32, d = 4.1000000000, h = 9.5000000000);
				translate(v = [0, 0, -0.2000000000]) {
					intersection() {
						cylinder($fn = 32, d = 4.1000000000, h = 9.5000000000);
						translate(v = [0, 0, 4.7500000000]) {
							cube(center = true, size = [7.6000000000, 2, 9.5000000000]);
						}
					}
				}
				translate(v = [0, 0, -0.4000000000]) {
					translate(v = [0, 0, 4.7500000000]) {
						cube(center = true, size = [2, 2, 9.5000000000]);
					}
				}
				translate(v = [0, 0, -15.0000000000]) {
					cylinder($fn = 32, d = 2.2000000000, h = 15.0000000000);
				}
			}
		}
	}
	translate(v = [-15.0000000000, 15.0000000000, 4]) {
		rotate(a = [180, 0, 0]) {
			union() {
				cylinder($fn = 32, d = 4.1000000000, h = 9.5000000000);
				translate(v = [0, 0, -0.2000000000]) {
					intersection() {
						cylinder($fn = 32, d = 4.1000000000, h = 9.5000000000);
						translate(v = [0, 0, 4.7500000000]) {
							cube(center = true, size = [7.6000000000, 2, 9.5000000000]);
						}
					}
				}
				translate(v = [0, 0, -0.4000000000]) {
					translate(v = [0, 0, 4.7500000000]) {
						cube(center = true, size = [2, 2, 9.5000000000]);
					}
				}
				translate(v = [0, 0, -15.0000000000]) {
					cylinder($fn = 32, d = 2.2000000000, h = 15.0000000000);
				}
			}
		}
	}
	translate(v = [15.0000000000, -15.0000000000, 4]) {
		rotate(a = [180, 0, 0]) {
			union() {
				cylinder($fn = 32, d = 4.1000000000, h = 9.5000000000);
				translate(v = [0, 0, -0.2000000000]) {
					intersection() {
						cylinder($fn = 32, d = 4.1000000000, h = 9.5000000000);
						translate(v = [0, 0, 4.7500000000]) {
							cube(center = true, size = [7.6000000000, 2, 9.5000000000]);
						}
					}
				}
				translate(v = [0, 0, -0.4000000000]) {
					translate(v = [0, 0, 4.7500000000]) {
						cube(center = true, size = [2, 2, 9.5000000000]);
					}
				}
				translate(v = [0, 0, -15.0000000000]) {
					cylinder($fn = 32, d = 2.2000000000, h = 15.0000000000);
				}
			}
		}
	}
	translate(v = [-15.0000000000, -15.0000000000, 4]) {
		rotate(a = [180, 0, 0]) {
			union() {
				cylinder($fn = 32, d = 4.1000000000, h = 9.5000000000);
				translate(v = [0, 0, -0.2000000000]) {
					intersection() {
						cylinder($fn = 32, d = 4.1000000000, h = 9.5000000000);
						translate(v = [0, 0, 4.7500000000]) {
							cube(center = true, size = [7.6000000000, 2, 9.5000000000]);
						}
					}
				}
				translate(v = [0, 0, -0.4000000000]) {
					translate(v = [0, 0, 4.7500000000]) {
						cube(center = true, size = [2, 2, 9.5000000000]);
					}
				}
				translate(v = [0, 0, -15.0000000000]) {
					cylinder($fn = 32, d = 2.2000000000, h = 15.0000000000);
				}
			}
		}
	}
	translate(v = [15.2750000000, 0, -0.4000000000]) {
		rotate(a = [180, 0, 0]) {
			union() {
				cylinder($fn = 32, d = 4.1000000000, h = 9.5000000000);
				translate(v = [0, 0, -0.2000000000]) {
					intersection() {
						cylinder($fn = 32, d = 4.1000000000, h = 9.5000000000);
						translate(v = [0, 0, 4.7500000000]) {
							cube(center = true, size = [7.6000000000, 2, 9.5000000000]);
						}
					}
				}
				translate(v = [0, 0, -0.4000000000]) {
					translate(v = [0, 0, 4.7500000000]) {
						cube(center = true, size = [2, 2, 9.5000000000]);
					}
				}
				translate(v = [0, 0, -15.0000000000]) {
					cylinder($fn = 32, d = 2.2000000000, h = 15.0000000000);
				}
			}
		}
	}
	translate(v = [-15.2750000000, 0, -0.4000000000]) {
		rotate(a = [180, 0, 0]) {
			union() {
				cylinder($fn = 32, d = 4.1000000000, h = 9.5000000000);
				translate(v = [0, 0, -0.2000000000]) {
					intersection() {
						cylinder($fn = 32, d = 4.1000000000, h = 9.5000000000);
						translate(v = [0, 0, 4.7500000000]) {
							cube(center = true, size = [7.6000000000, 2, 9.5000000000]);
						}
					}
				}
				translate(v = [0, 0, -0.4000000000]) {
					translate(v = [0, 0, 4.7500000000]) {
						cube(center = true, size = [2, 2, 9.5000000000]);
					}
				}
				translate(v = [0, 0, -15.0000000000]) {
					cylinder($fn = 32, d = 2.2000000000, h = 15.0000000000);
				}
			}
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
from solid.utils import *
import solid
import os
from screw import MachineScrew,ScrewType
import utils
from const import *

def camera_rev_1_3_adapter():
    height = 7.5 
    sensor_h = 3
    sensor_w = 8.75 + 0.35
    sensor_l = 8.65 + 0.35
    module_w = 24 
    module_l = 25
    sensor_y_off_top = 6.1
    sensor_y_center_offset = (24 - 8.75)/2 - sensor_y_off_top
    screw_top_y_offset = 9.4
    screw_top_x_offset = 2.2
    screw_bottom_y_offset = 1.8
    screw_bottom_x_offset = 2
    # led_bottom_offset_x = 4.4
    # led_bottom_offset_y = 4.2
    # sensor_y =  PLATE_SIDE/2-sensor_w/2 - (PLATE_SIDE-module_l)/2-sensor_y_off
    # sensor_y = PLATE_SIDE/2-sensor_w/2 - (PLATE_SIDE-module_l)/2 -sensor_y_off_top
    plate = utils.cube_chamfered([ADAPTER_SIDE,ADAPTER_SIDE,height],center=True,r=3)
    plate = translate((0,0,height/2))(plate)
    sensor = cube([sensor_l,sensor_w,height+0.1],center=True)
    conn_cutout = cube([sensor_l,module_w/2+0.5,height],center=True)
    led_pocket = cylinder(segments=32,d=5,h=height,center=True)
    board = union()(
        translate((0,0,height/2+sensor_h))(cube([module_l+0.5,module_w+0.5,height],center=True)),
        # connector cutout
        translate((0,-module_w/4,height/2+sensor_h-2))(conn_cutout),
        # mounting screws
        translate((module_l/2-screw_top_x_offset,module_w/2-screw_top_y_offset,height/2+0.4))(cylinder(segments=32,d=2,h=height,center=True)),
        translate((-module_l/2+screw_top_x_offset,module_w/2-screw_top_y_offset,height/2+0.4))(cylinder(segments=32,d=2,h=height,center=True)),
        translate((-module_l/2+screw_bottom_x_offset,-module_w/2+screw_bottom_y_offset,height/2+0.4))(cylinder(segments=32,d=2,h=height,center=True)),
        translate((module_l/2-screw_bottom_x_offset,-module_w/2+screw_bottom_y_offset,height/2+0.4))(cylinder(segments=32,d=2,h=height,center=True)),
        # smd led and resistor pocket
        translate((module_l/2-5,-module_w/2+3.75,sensor_h*2-1))(led_pocket),
        # led opening
        # translate((module_l/2-led_bottom_offset_x,-module_w/2+led_bottom_offset_y,0))(cylinder(segments=32,d=2,h=height,center=True))
    )
    screw_hole = MachineScrew(type=ScrewType.M2_HEX,length=height*2,overhang=True,extend_head_height=height)()
    screw_hole = rotate([180,0,0])(screw_hole)
    plate = difference()(
        plate,
        translate((0,-sensor_y_center_offset))(board),
        # make space for flex cable
        translate((0,ADAPTER_SIDE/4-1,height/2+sensor_h))(cube([module_l+0.5,ADAPTER_SIDE/2,height],center=True)),
        sensor,
        # mounting screws
        translate((ADAPTER_SIDE/2-ADAPTER_HOLE_TO_SIDE,ADAPTER_SIDE/2-ADAPTER_HOLE_TO_SIDE,4))(screw_hole),
        translate((-ADAPTER_SIDE/2+ADAPTER_HOLE_TO_SIDE,ADAPTER_SIDE/2-ADAPTER_HOLE_TO_SIDE,4))(screw_hole),
        translate((ADAPTER_SIDE/2-ADAPTER_HOLE_TO_SIDE,-ADAPTER_SIDE/2+ADAPTER_HOLE_TO_SIDE,4))(screw_hole),
        translate((-ADAPTER_SIDE/2+ADAPTER_HOLE_TO_SIDE,-ADAPTER_SIDE/2+ADAPTER_HOLE_TO_SIDE,4))(screw_hole),
        # Lens ring mount screws
        translate((CS_LENS_RING_NUT_OFFSET,0,-.4))(screw_hole),
        translate((-CS_LENS_RING_NUT_OFFSET,0,-.4))(screw_hole),
    )
    return plate

if __name__ == "__main__":
    adapter = camera_rev_1_3_adapter()
    filename = 'camera_rev_1_3_adapter.scad'
    path = 'stl/adapters'
    os.makedirs(path, exist_ok=True)
    solid.scad_render_to_file(adapter, os.path.join(path,filename)) 
 
************************************************/
